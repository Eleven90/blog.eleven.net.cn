<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模块间循环引用问题</title>
      <link href="/2020/06/11/circular-dependency/index/"/>
      <url>/2020/06/11/circular-dependency/index/</url>
      
        <content type="html"><![CDATA[<p>有时候可能会遇见这样的场景：模块A引用了模块B里的func1方法，而模块B又引用了模块A里的func2方法。</p><p>类似上面的场景，或者其它更复杂的如：A 引用 B，B 引用 C，C 又引用了 A，在不经意间可能会遇到一些诡异问题，如：明明代码没问题，却读不到导入的模块……</p><p>为了更好地避免这样的问题，可以使用 <a href="https://github.com/aackerman/circular-dependency-plugin" target="_blank" rel="noopener">circular-dependency-plugin</a> 插件来做循环引用的检测:</p><p>基本用法如下，复制、粘贴即可生效：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> CircularDependencyPlugin = <span class="built_in">require</span>(<span class="string">'circular-dependency-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CircularDependencyPlugin(&#123;</span><br><span class="line">      <span class="comment">// exclude detection of files based on a RegExp</span></span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// include specific files based on a RegExp</span></span><br><span class="line">      include: <span class="regexp">/src/</span>,</span><br><span class="line">      <span class="comment">// add errors to webpack instead of warnings</span></span><br><span class="line">      failOnError: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// allow import cycles that include an asyncronous import,</span></span><br><span class="line">      <span class="comment">// e.g. via import(/* webpackMode: "weak" */ './file.js')</span></span><br><span class="line">      allowAsyncCycles: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// set the current working directory for displaying module paths</span></span><br><span class="line">      cwd: process.cwd(),</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检测到问题时，会看到如下图的编译提示：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/10/16eefa622ebb1ebf?w=1060&h=230&f=png&s=51565" alt=""></p><p>如何解决循环引用的问题？将被循环引用到的模块提取放到另外的模块，打破这个循环即可！</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol><li><a href="https://www.imooc.com/article/260265" target="_blank" rel="noopener">webpack 与循环引用</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/11/circular-dependency.html" target="_blank" rel="noopener">JavaScript 模块的循环加载</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动修改 node_moduels 的包</title>
      <link href="/2020/06/11/patch-packages/index/"/>
      <url>/2020/06/11/patch-packages/index/</url>
      
        <content type="html"><![CDATA[<p>有时候 node_modules 中的第三方包有问题或需要修改几行源码，我们可以怎么办？</p><ol><li><p>去给作者提 issues？可能得不到回复。</p></li><li><p>自己在 node_modules 里直接修改源码？下一次重新安装包，或者其他同事 install 的时候，被修改过的源码又恢复如初了。</p></li><li><p>不用他的包，自己写一个？……</p></li></ol><p>社区提供了一个工具：<a href="https://github.com/ds300/patch-package" target="_blank" rel="noopener">patch-package</a>，专门用来处理修改 node_modules 包源码的问题。</p><p>需要区分 npm 和 yarn，二者使用方法有一些区别，分开做描述。</p><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><ol><li><p>在 package.json 的 scripts 中增加如下命令：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">+  "postinstall": "patch-package"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>postinstall</code> 是 npm 的钩子，会在依赖包被 <code>install</code> 之后被执行。</p></li><li><p>安装 patch-package</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i patch-package -D</span><br></pre></td></tr></table></figure></li><li><p>上面两步都做了，就可以去修改 node_modules 里任意第三方包的源码了。</p></li><li><p>修改了源码，随后需要执行以下命令：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx patch-package [package-name]  <span class="comment"># [package-name] 是包名，不需要写路径。</span></span><br></pre></td></tr></table></figure><p> 命令执行成功后，会发现项目根目录下多了一个文件夹 <code>patches</code>，该目录下多了文件，即为记录源码修改的文件。</p><p> <img src="https://user-gold-cdn.xitu.io/2020/3/27/1711bce8d8e01745?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p> 将 <code>patches</code> 目录及文件，通过 git 提交到代码仓库。</p></li><li><p>Over，后续其他同学不需要做额外操作，直接安装即可，node_modules 下的源码修改会自动更新。</p><p> 之前已经安装过该第三方包的同学，需要卸载，重新安装一次。</p></li><li><p>如果后续还有其它包也需要修改源码，修改过后，再执行一次命令：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx patch-package [package-name]  <span class="comment"># [package-name] 是包名，不需要写路径。</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><ol><li><p>在 package.json 的 scripts 中增加如下命令：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">+  "postinstall": "patch-package"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>postinstall</code> 是 npm 的钩子，会在依赖包被 <code>install</code> 之后被执行。</p></li><li><p>安装 patch-package、postinstall-postinstall</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add patch-package postinstall-postinstall -D</span><br></pre></td></tr></table></figure></li><li><p>上面两步都做了，就可以去修改 node_modules 里任意第三方包的源码了。</p></li><li><p>修改了源码，随后需要执行以下命令：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn patch-package [package-name]  <span class="comment"># [package-name] 是包名，不需要写路径。</span></span><br></pre></td></tr></table></figure><p> 命令执行成功后，会发现项目根目录下多了一个文件夹 <code>patches</code>，该目录下多了文件，即为记录源码修改的文件。</p><p> <img src="https://user-gold-cdn.xitu.io/2020/3/27/1711bce8d8e01745?w=418&h=102&f=png&s=11416" alt=""></p><p> 将 <code>patches</code> 目录及文件，通过 git 提交到代码仓库。</p></li><li><p>Over，后续其他同学不需要做额外操作，直接安装即可，node_modules 下的源码修改会自动更新。</p><p> 之前已经安装过该第三方包的同学，需要卸载，重新安装一次。</p></li><li><p>如果后续还有其它包也需要修改源码，修改过后，再执行一次命令：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn patch-package [package-name]  <span class="comment"># [package-name] 是包名，不需要写路径。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><p>过程中遇到一个错误，记录一下，其他人不一定会遇到。</p><p> macos 在终端报如下错误:</p><p> <img src="https://user-gold-cdn.xitu.io/2020/3/27/1711bcf316c96916?w=2240&h=288&f=png&s=90956" alt=""></p><p> 可以参照这个文档解决：<a href="https://www.cnblogs.com/start-fxw/p/10192226.html" target="_blank" rel="noopener">https://www.cnblogs.com/start-fxw/p/10192226.html</a></p><p> 终端运行如下命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p> 更新一下 xcode 即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> NPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM 包发布指南</title>
      <link href="/2020/06/11/npm-publish/index/"/>
      <url>/2020/06/11/npm-publish/index/</url>
      
        <content type="html"><![CDATA[<h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><ol><li><p>在 NPM 官网注册账号，<a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a></p><p> 邮件验证的时候可能需要翻墙访问。</p></li><li><p>本机安装 nodejs</p></li><li><p>推荐也安装一下 nrm，方便随时切换 npm 源</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i nrm -g</span><br></pre></td></tr></table></figure><p> nrm 常用命令</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nrm ls                  <span class="comment"># 查看所有</span></span><br><span class="line">nrm use [目标源]         <span class="comment"># 切换至目标源</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="二、package-json-文件"><a href="#二、package-json-文件" class="headerlink" title="二、package.json 文件"></a>二、package.json 文件</h4><p>包的<strong>根目录</strong>需要有一个 package.json 文件，可以通过 <code>npm init</code> 命令去创建，示例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"@eleven.xi/reset.css"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.6"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"H5 网页 reset 方案，PC&amp;mobile"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/reset.css"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"release"</span>: <span class="string">"npm publish . --access=public"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/Eleven90/reset.css.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"reset.css"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Eleven"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/Eleven90/reset.css/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/Eleven90/reset.css#readme"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [<span class="string">"lib"</span>, <span class="string">"ReadMe.md"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文件中重点注意以下几项：</strong></p><ol><li><p>main：指定包的入口文件</p></li><li><p>name：指定包名</p><ul><li><p>发布之前都要去<a href="https://www.npmjs.com" target="_blank" rel="noopener">NPM 官网</a>上搜索一遍，确认想要使用的包名，是否已经被占用。</p></li><li><p>包名支持 [@scope]/[package name] 的形式，[@scope] 类似于命名空间的作用，NPM 默认允许你使用自己注册的用户名，或者在自己的账户下申请的 organizations。</p><p>  典型的例子，如 Babel，插件原先使用的是 babel-plugin-xxx 的格式命名，后来因为许多个人发布的包和官方的包命名格式一样，导致难以区分，现在 babel 官方所有的包都更换成了 @babel/xxx 的格式。</p></li></ul></li><li><p>version：包的版本</p><ul><li>格式 <code>数字.数字.数字</code>，每一次发布，版本都必须要更新，只能往上增加。</li></ul></li><li><p>keywords：关键词</p><ul><li>希望别人通过哪些关键词搜索到你的包，可以在这里添加。</li></ul></li><li><p>files：指定哪些文件夹、文件将被发布</p><ul><li><p>如果你的项目目录下包含了一些隐私文件，不希望被发布出去，一定要注意配置此项，仅包含可以被发布的文件夹、文件。</p></li><li><p>可以在包的根目录下新建文件 <code>.npmignore</code>，指定哪些文件不被发布，书写格式与 <code>.gitignore</code> 文件一致。</p></li></ul><ol start="6"><li><p>license：协议，推荐阅读了解几种开源的协议：</p><ul><li><p><a href="https://www.jianshu.com/p/86251523e898" target="_blank" rel="noopener">七种开源许可证</a></p></li><li><p><a href="https://spdx.org/licenses/" target="_blank" rel="noopener">SPDX License List</a></p></li></ul></li><li><p>description、repository、author、bugs、homepage 等项，通常也推荐填写完整，详细的 package.json 每一项的含义，推荐阅读这一篇：<a href="https://blog.csdn.net/zhengxiuchen86/article/details/81285030" target="_blank" rel="noopener">npm package.json属性详解</a> 。</p></li></ol></li></ol><h4 id="三、待发布的包结构"><a href="#三、待发布的包结构" class="headerlink" title="三、待发布的包结构"></a>三、待发布的包结构</h4><ol><li><p>移除不必要的代码</p><p> 发布出去的包，一般只需要包含用户使用时必须要 <code>install</code> 下载的文件即可，例如一些构建脚本等无关的代码文件，不必发布出去。</p><p> 例如：你有一个开源项目，同时，该项目也提供了包供开发者使用，最佳方式应该是将该项目源码推送到 GitHub 上开源，而发布到 NPM 仓库的包，尽量不要把项目源码目录、构建脚本等非必要的文件发布到 NPM 仓库，会增大包的体积，导致安装时间变长。</p></li><li><p>发布的包尽量要做好语法转译，否则要在文档中说明，提醒使用者自己完成。</p></li><li><p>保护隐私</p><p> 如果待发布的包，并非开源项目，而仅仅是为了提供开发者 NPM 安装、使用，一定要做好隐私保护工作，防止源码、隐私的文档等隐秘信息被发布到 NPM 仓库。可以选用的方法如下：</p><ol><li><p><code>.gitignore</code> 设置忽略哪些文件</p><p>   .gitignore 设置的忽略文件，在 git 代码管理和 npm publish 都会被忽略。</p></li><li><p>.npmignore 设置忽略哪些文件</p><p>   .npmignore 优先级更高，如果同时使用了 .npmignore 和 .gitignore，只有 .npmignore 会生效。</p></li><li><p>package.json 文件的 files 字段</p><p>   直接在 package.json 文件中配置 <code>files</code>，指定发布哪些文件、目录，优先级高于 .npmignore 和 .gitignore。</p></li></ol></li><li><p>以下文件、目录在发布时，默认会被忽略</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.*.swp</span><br><span class="line">._*</span><br><span class="line">.DS_Store</span><br><span class="line">.git</span><br><span class="line">.hg</span><br><span class="line">.npmrc</span><br><span class="line">.lock-wscript</span><br><span class="line">.svn</span><br><span class="line">.wafpickle-*</span><br><span class="line">config.gypi</span><br><span class="line">CVS</span><br><span class="line">npm-debug.log</span><br><span class="line">node_modules&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>以下文件、目录在发布时，默认会被包含，无法忽略掉</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">README (and its variants)</span><br><span class="line">CHANGELOG (and its variants)</span><br><span class="line">LICENSE &#x2F; LICENCE</span><br></pre></td></tr></table></figure></li></ol><h4 id="四、发布"><a href="#四、发布" class="headerlink" title="四、发布"></a>四、发布</h4><ol><li><p>登录 NPM 账号</p><ol><li><p>在终端运行命令，填写账号、密码及邮箱。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser / npm login</span><br></pre></td></tr></table></figure></li><li><p>查看是否登录上了？</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm who am i</span><br></pre></td></tr></table></figure></li><li><p>通常只有一个人可以发布，也可以添加多人，相关命令如下：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm owner ls &lt;package name&gt;             <span class="comment"># 查看</span></span><br><span class="line">npm owner add &lt;user&gt; &lt;package name&gt;     <span class="comment"># 添加</span></span><br><span class="line">npm owner rm &lt;user&gt; &lt;package name&gt;      <span class="comment"># 删除</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>发布</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish . --access=public</span><br></pre></td></tr></table></figure><ol><li><p>这里注意一下发布命令中的点 <code>.</code> ，如果不带 <code>.</code> ，偶尔碰到发布会出错。</p></li><li><p>包名重复（或者说已被占用）、未登录，都会导致发布失败，注意看提示信息。</p></li><li><p>注意版本号必须要递增，相同的版本号或版本号递减会发布失败。</p></li></ol></li><li><p>撤回已发布的版本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish -f &lt;package name&gt;@&lt;package version&gt;</span><br></pre></td></tr></table></figure><ol><li><p>包发布后的 72 小时内，可以撤回。</p></li><li><p>已撤回的版本，该版本号就不能再重新发布了，因为在 NPM 的仓库中已经有了记录。</p></li></ol></li><li><p>其它问题</p><ol><li><p>偶尔可能会看到如下错误:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no_perms Private mode <span class="built_in">enable</span>, only admin can publish this module</span><br></pre></td></tr></table></figure><p> 解决办法：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure></li><li><p>NPM 官方提供了发布的指导：<a href="https://docs.npmjs.com/misc/developers" target="_blank" rel="noopener">https://docs.npmjs.com/misc/developers</a> ，如果遇到一些奇怪的问题，建议前往阅读。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> NPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规范 git commit</title>
      <link href="/2020/06/11/git-commit/index/"/>
      <url>/2020/06/11/git-commit/index/</url>
      
        <content type="html"><![CDATA[<p>如何让 <code>git commit</code> 提交时更加规范？例如：vue、angular，如下图。规范化地提交记录，会让将来的回溯查找更容易，也让其他人阅读起来更加简便。</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/12/172081ff77566188?w=996&h=1021&f=png&s=251160" alt=""></p><p>最近读到一篇不错的文章（<a href="https://juejin.im/post/5e0c82a15188253a907111dc" target="_blank" rel="noopener">你可能已经忽略的 git commit 规范</a>），吸取下养分，顺便做个记录。文章介绍得很清楚，建议阅读原文，不做额外赘述，以下为集成到项目的快速指南。</p><h2 id="快速指南"><a href="#快速指南" class="headerlink" title="快速指南"></a>快速指南</h2><p>使用到的工具 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen</a>、<a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a>、<a href="https://github.com/carloscuesta/gitmoji-cli" target="_blank" rel="noopener">gitmoji-cli</a>，cz-conventional-changelog 是 angular 的 commit message 格式。</p><p>所有包不推荐 global 安装，而仅项目本地安装，方便多人开发时，减少其他人的额外操作。</p><ol><li><p>安装工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add commitizen cz-conventional-changelog -D</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录的 package.json 中添加配置</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"commit"</span>: <span class="string">"git-cz"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"commitizen"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"./node_modules/cz-conventional-changelog"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 官方推荐的是 global 安装 commitizen，然后执行 <code>commitizen init cz-conventional-changelog --yarn --dev --exact</code> 去自动添加 cz-conventional-changelog，自动在 package.json 中添加 config 配置，不太推荐这种方式。</p></li><li><p>使用</p><ul><li><p><code>git commit</code> 仍然是普通的 git 提交模式</p></li><li><p><code>yarn commit</code> 会执行交互式 commit 提交，在终端跟着提示一步步输入即可。</p></li></ul></li><li><p>限制每一次 <code>git commit</code> 都执行交互式提交</p><p> 如果想要更暴力一点，限制每一次 <code>git commit</code> 都自动执行规范化地提交，可以配置 git 提交的钩子，借助 husky 更方便一点（不用 husky 当然也可以）。</p><p> 先将 scripts 中配置的 commit 命令删除，不再需要了。</p><p> 安装 husky</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky -D</span><br></pre></td></tr></table></figure><p> 在 package.json 中增加配置</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"prepare-commit-msg"</span>: <span class="string">"exec &lt; /dev/tty &amp;&amp; git cz --hook || true"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 有些时候可能不太需要所有的 commit 都执行规范化的提交流程，因此，推荐不要这么暴力限制，而是仅在关键性的提交步骤才执行。</p></li></ol><h2 id="在提交中支持表情符号"><a href="#在提交中支持表情符号" class="headerlink" title="在提交中支持表情符号"></a>在提交中支持表情符号</h2><p>如果想要在提交中使用一些表情符号，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/12/172086dbf52c646f?w=2016&h=1570&f=png&s=405106" alt=""></p><p>可以借助 <a href="https://github.com/carloscuesta/gitmoji-cli" target="_blank" rel="noopener">gitmoji-cli</a></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gitmoji-cli -D</span><br></pre></td></tr></table></figure><p>使用方法：在提交时按照约定格式输入表情字符即可（左右两边英文冒号夹着字符，例如bug ☞ <code>:bug:</code>），提交后会自动被显示，示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"fix(src): :bug: 修复列表显示问题"</span></span><br></pre></td></tr></table></figure><p>如果想要查看所有的表情符号及介绍，可以<a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">去官方文档查阅</a>，也可以全局安装</p><p><code>npm i -g gitmoji-cli</code></p><p>执行 <code>gitmoji -l</code> 命令在终端查看。</p><h2 id="常见的-commit-类型"><a href="#常见的-commit-类型" class="headerlink" title="常见的 commit 类型"></a>常见的 commit 类型</h2><ul><li>feat: 新增feature</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档，如readme.md</li><li>style: 仅仅是对格式进行修改，如逗号、缩进、空格等。不改变代码逻辑。</li><li>refactor: 代码重构，没有新增功能或修复bug</li><li>perf: 优化相关，如提升性能、用户体验等。</li><li>test: 测试用例，包括单元测试、集成测试。</li><li>chore: 改变构建流程、或者增加依赖库、工具等。</li><li>revert: 版本回滚</li></ul><h2 id="自己手写-commit-的推荐写法"><a href="#自己手写-commit-的推荐写法" class="headerlink" title="自己手写 commit 的推荐写法"></a>自己手写 commit 的推荐写法</h2><p>如果通过简单的 git commit -m “” 提交，你大概可以这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"feat(player): 播放功能开发完成"</span></span><br></pre></td></tr></table></figure><p>引号内即 commit 的 message:</p><ul><li>feat 表明本次提交的类型</li><li>括号内容是本次代码的影响目录/文件</li><li>冒号后面是本次提交的简短描述（冒号后面推荐来个空格）  </li></ul><p>加点表情符号（当然，你要先安装 gitmoji-cli）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"feat(player): :rocket: 播放功能开发完成"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Git 钩子提交时修改版本号</title>
      <link href="/2020/06/11/check-version/index/"/>
      <url>/2020/06/11/check-version/index/</url>
      
        <content type="html"><![CDATA[<p>前端项目在 git 提交时，往往会遗忘更新项目根目录的 package.json 文件的 version，通常不修改也不会有啥问题，但对于强迫症来说，不能忍！咱要改掉它……</p><h4 id="编写一个简单的-node-脚本-check-version-js"><a href="#编写一个简单的-node-脚本-check-version-js" class="headerlink" title="编写一个简单的 node 脚本 check-version.js"></a>编写一个简单的 node 脚本 <code>check-version.js</code></h4><p>先安装几个依赖包 <code>yarn add inquirer chalk child_process -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /scripts/check-version.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: projectName, <span class="attr">version</span>: versionCurrent &#125; = <span class="built_in">require</span>(<span class="string">'../package'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regVersion = <span class="regexp">/^[1-9]&#123;1&#125;\d*\.\d+\.\d+$/</span> <span class="comment">// 示例: 1.0.0</span></span><br><span class="line"><span class="comment">// const regVersion = /^\d+\.\d+\.\d+$/ // 示例: 0.0.1 / 1.0.1</span></span><br><span class="line"><span class="comment">// const regVersion = /^\d+\.\d+\.\d+(-beta.?\d*)?$/ // 示例: 1.0.3 / 0.0.1-beta / 1.0.0-beta.3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确认 package.json 版本号</span></span><br><span class="line">inquirer</span><br><span class="line">  .prompt([</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'input'</span>,</span><br><span class="line">      name: <span class="string">'version'</span>,</span><br><span class="line">      message: <span class="string">`请确认 <span class="subst">$&#123;projectName&#125;</span>/package.json/version 版本号（当前：<span class="subst">$&#123;versionCurrent&#125;</span>）：\n`</span>,</span><br><span class="line">      <span class="keyword">default</span>: versionCurrent,</span><br><span class="line">      validate(version) &#123;</span><br><span class="line">        <span class="comment">// 校验版本号的格式</span></span><br><span class="line">        <span class="keyword">if</span> (!regVersion.test(version)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(chalk.yellow(<span class="string">'输入的版本号无效，请检查格式（示例：1.0.0、2.3.2）'</span>))</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; version: versionNew &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (versionNew !== versionCurrent) &#123;</span><br><span class="line">      <span class="comment">// 更新 package.json version，更新时不自动生成 tag</span></span><br><span class="line">      command(<span class="string">`npm --no-git-tag-version version <span class="subst">$&#123;versionNew&#125;</span>`</span>, &#123;&#125;, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(</span><br><span class="line">            chalk.green(</span><br><span class="line">              <span class="string">`\n<span class="subst">$&#123;projectName&#125;</span> 版本号（项目根目录下的 package.json/version）更新成功，version: <span class="subst">$&#123;versionNew&#125;</span> ！`</span>,</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">          command(</span><br><span class="line">            <span class="string">`git add package.json &amp;&amp; git commit -m 'ci(package.json): 更新项目版本号为：<span class="subst">$&#123;versionNew&#125;</span>'`</span>,</span><br><span class="line">          )</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`\n`</span>)</span><br><span class="line">          process.exit(<span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(chalk.yellow(<span class="string">`\n更新版本号（<span class="subst">$&#123;versionNew&#125;</span>）失败了~\n`</span>))</span><br><span class="line">          process.exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.green(<span class="string">`\n本次版本号未做修改，version: <span class="subst">$&#123;versionNew&#125;</span> ！\n`</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">command</span>(<span class="params">cmd, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.cyan(cmd.toString()))</span><br><span class="line">  <span class="keyword">return</span> exec(cmd, &#123; ...options &#125;, callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-Git-钩子"><a href="#配置-Git-钩子" class="headerlink" title="配置 Git 钩子"></a>配置 Git 钩子</h4><ol><li><p>先安装 <code>husky</code>，用于管理 git 钩子，当然，使用原生的也可以。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky -D</span><br></pre></td></tr></table></figure></li><li><p>在项目的 package.json 文件中增加以下配置：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"husky": &#123;</span><br><span class="line">  "hooks": &#123;</span><br><span class="line">    "post-commit": "exec &lt; /dev/tty &amp;&amp; node scripts/check-version.js"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>完成以上配置后，后续在执行 git commit 提交代码时，会自动在终端弹出交互，提示修改 package.json 文件的 version，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2020/6/10/1729d6b37f7e5254?w=1326&h=348&f=png&s=55796" alt=""></p><p>如果不需要修改直接敲击 Enter 跳过，需要则输入新的版本号，会自动执行命令修改 package.json 文件的 version，并自动提交刚刚的修改，接下来 <code>git push</code> 推送代码即可。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还是搭个博客吧...</title>
      <link href="/2020/06/10/zero/index/"/>
      <url>/2020/06/10/zero/index/</url>
      
        <content type="html"><![CDATA[<p>搭一个技术博客这件事，一直比较纠结，想想没那么多东西可以写，写也没什么人看，那么搭这么个东西意义是啥？</p><p>想记录什么资料，往往会选择印象笔记，其次在 <a href="https://juejin.im/user/5c41b586f265da6142742a44" target="_blank" rel="noopener">掘金</a>、<a href="https://segmentfault.com/u/xeleven" target="_blank" rel="noopener">SegmentFault</a> 整理一些内容，还有朋友创建的 <a href="http://jsdr.info/" target="_blank" rel="noopener">技术小分队</a> 记录一些。</p><p>久而久之，可能确实有一些东西值得写下来。那么，索性就把博客搭起来吧，搜索、查阅好用一点…</p><p>有用的，没用的，想到什么写什么…</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
